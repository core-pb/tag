// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tag/v1/service_relation.proto

package tagconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/core-pb/tag/tag/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RelationshipName is the fully-qualified name of the Relationship service.
	RelationshipName = "tag.v1.Relationship"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RelationshipListRelationProcedure is the fully-qualified name of the Relationship's ListRelation
	// RPC.
	RelationshipListRelationProcedure = "/tag.v1.Relationship/ListRelation"
	// RelationshipSetRelationProcedure is the fully-qualified name of the Relationship's SetRelation
	// RPC.
	RelationshipSetRelationProcedure = "/tag.v1.Relationship/SetRelation"
	// RelationshipDeleteRelationProcedure is the fully-qualified name of the Relationship's
	// DeleteRelation RPC.
	RelationshipDeleteRelationProcedure = "/tag.v1.Relationship/DeleteRelation"
	// RelationshipDestroyExternalRelationProcedure is the fully-qualified name of the Relationship's
	// DestroyExternalRelation RPC.
	RelationshipDestroyExternalRelationProcedure = "/tag.v1.Relationship/DestroyExternalRelation"
	// RelationshipDestroyTagRelationProcedure is the fully-qualified name of the Relationship's
	// DestroyTagRelation RPC.
	RelationshipDestroyTagRelationProcedure = "/tag.v1.Relationship/DestroyTagRelation"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	relationshipServiceDescriptor                       = v1.File_tag_v1_service_relation_proto.Services().ByName("Relationship")
	relationshipListRelationMethodDescriptor            = relationshipServiceDescriptor.Methods().ByName("ListRelation")
	relationshipSetRelationMethodDescriptor             = relationshipServiceDescriptor.Methods().ByName("SetRelation")
	relationshipDeleteRelationMethodDescriptor          = relationshipServiceDescriptor.Methods().ByName("DeleteRelation")
	relationshipDestroyExternalRelationMethodDescriptor = relationshipServiceDescriptor.Methods().ByName("DestroyExternalRelation")
	relationshipDestroyTagRelationMethodDescriptor      = relationshipServiceDescriptor.Methods().ByName("DestroyTagRelation")
)

// RelationshipClient is a client for the tag.v1.Relationship service.
type RelationshipClient interface {
	ListRelation(context.Context, *connect.Request[v1.ListRelationRequest]) (*connect.Response[v1.ListRelationResponse], error)
	SetRelation(context.Context, *connect.Request[v1.SetRelationRequest]) (*connect.Response[v1.SetRelationResponse], error)
	DeleteRelation(context.Context, *connect.Request[v1.DeleteRelationRequest]) (*connect.Response[v1.DeleteRelationResponse], error)
	DestroyExternalRelation(context.Context, *connect.Request[v1.DestroyExternalRelationRequest]) (*connect.Response[v1.DestroyExternalRelationResponse], error)
	DestroyTagRelation(context.Context, *connect.Request[v1.DestroyTagRelationRequest]) (*connect.Response[v1.DestroyTagRelationResponse], error)
}

// NewRelationshipClient constructs a client for the tag.v1.Relationship service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRelationshipClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RelationshipClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &relationshipClient{
		listRelation: connect.NewClient[v1.ListRelationRequest, v1.ListRelationResponse](
			httpClient,
			baseURL+RelationshipListRelationProcedure,
			connect.WithSchema(relationshipListRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setRelation: connect.NewClient[v1.SetRelationRequest, v1.SetRelationResponse](
			httpClient,
			baseURL+RelationshipSetRelationProcedure,
			connect.WithSchema(relationshipSetRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRelation: connect.NewClient[v1.DeleteRelationRequest, v1.DeleteRelationResponse](
			httpClient,
			baseURL+RelationshipDeleteRelationProcedure,
			connect.WithSchema(relationshipDeleteRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		destroyExternalRelation: connect.NewClient[v1.DestroyExternalRelationRequest, v1.DestroyExternalRelationResponse](
			httpClient,
			baseURL+RelationshipDestroyExternalRelationProcedure,
			connect.WithSchema(relationshipDestroyExternalRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		destroyTagRelation: connect.NewClient[v1.DestroyTagRelationRequest, v1.DestroyTagRelationResponse](
			httpClient,
			baseURL+RelationshipDestroyTagRelationProcedure,
			connect.WithSchema(relationshipDestroyTagRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// relationshipClient implements RelationshipClient.
type relationshipClient struct {
	listRelation            *connect.Client[v1.ListRelationRequest, v1.ListRelationResponse]
	setRelation             *connect.Client[v1.SetRelationRequest, v1.SetRelationResponse]
	deleteRelation          *connect.Client[v1.DeleteRelationRequest, v1.DeleteRelationResponse]
	destroyExternalRelation *connect.Client[v1.DestroyExternalRelationRequest, v1.DestroyExternalRelationResponse]
	destroyTagRelation      *connect.Client[v1.DestroyTagRelationRequest, v1.DestroyTagRelationResponse]
}

// ListRelation calls tag.v1.Relationship.ListRelation.
func (c *relationshipClient) ListRelation(ctx context.Context, req *connect.Request[v1.ListRelationRequest]) (*connect.Response[v1.ListRelationResponse], error) {
	return c.listRelation.CallUnary(ctx, req)
}

// SetRelation calls tag.v1.Relationship.SetRelation.
func (c *relationshipClient) SetRelation(ctx context.Context, req *connect.Request[v1.SetRelationRequest]) (*connect.Response[v1.SetRelationResponse], error) {
	return c.setRelation.CallUnary(ctx, req)
}

// DeleteRelation calls tag.v1.Relationship.DeleteRelation.
func (c *relationshipClient) DeleteRelation(ctx context.Context, req *connect.Request[v1.DeleteRelationRequest]) (*connect.Response[v1.DeleteRelationResponse], error) {
	return c.deleteRelation.CallUnary(ctx, req)
}

// DestroyExternalRelation calls tag.v1.Relationship.DestroyExternalRelation.
func (c *relationshipClient) DestroyExternalRelation(ctx context.Context, req *connect.Request[v1.DestroyExternalRelationRequest]) (*connect.Response[v1.DestroyExternalRelationResponse], error) {
	return c.destroyExternalRelation.CallUnary(ctx, req)
}

// DestroyTagRelation calls tag.v1.Relationship.DestroyTagRelation.
func (c *relationshipClient) DestroyTagRelation(ctx context.Context, req *connect.Request[v1.DestroyTagRelationRequest]) (*connect.Response[v1.DestroyTagRelationResponse], error) {
	return c.destroyTagRelation.CallUnary(ctx, req)
}

// RelationshipHandler is an implementation of the tag.v1.Relationship service.
type RelationshipHandler interface {
	ListRelation(context.Context, *connect.Request[v1.ListRelationRequest]) (*connect.Response[v1.ListRelationResponse], error)
	SetRelation(context.Context, *connect.Request[v1.SetRelationRequest]) (*connect.Response[v1.SetRelationResponse], error)
	DeleteRelation(context.Context, *connect.Request[v1.DeleteRelationRequest]) (*connect.Response[v1.DeleteRelationResponse], error)
	DestroyExternalRelation(context.Context, *connect.Request[v1.DestroyExternalRelationRequest]) (*connect.Response[v1.DestroyExternalRelationResponse], error)
	DestroyTagRelation(context.Context, *connect.Request[v1.DestroyTagRelationRequest]) (*connect.Response[v1.DestroyTagRelationResponse], error)
}

// NewRelationshipHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRelationshipHandler(svc RelationshipHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	relationshipListRelationHandler := connect.NewUnaryHandler(
		RelationshipListRelationProcedure,
		svc.ListRelation,
		connect.WithSchema(relationshipListRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	relationshipSetRelationHandler := connect.NewUnaryHandler(
		RelationshipSetRelationProcedure,
		svc.SetRelation,
		connect.WithSchema(relationshipSetRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	relationshipDeleteRelationHandler := connect.NewUnaryHandler(
		RelationshipDeleteRelationProcedure,
		svc.DeleteRelation,
		connect.WithSchema(relationshipDeleteRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	relationshipDestroyExternalRelationHandler := connect.NewUnaryHandler(
		RelationshipDestroyExternalRelationProcedure,
		svc.DestroyExternalRelation,
		connect.WithSchema(relationshipDestroyExternalRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	relationshipDestroyTagRelationHandler := connect.NewUnaryHandler(
		RelationshipDestroyTagRelationProcedure,
		svc.DestroyTagRelation,
		connect.WithSchema(relationshipDestroyTagRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tag.v1.Relationship/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RelationshipListRelationProcedure:
			relationshipListRelationHandler.ServeHTTP(w, r)
		case RelationshipSetRelationProcedure:
			relationshipSetRelationHandler.ServeHTTP(w, r)
		case RelationshipDeleteRelationProcedure:
			relationshipDeleteRelationHandler.ServeHTTP(w, r)
		case RelationshipDestroyExternalRelationProcedure:
			relationshipDestroyExternalRelationHandler.ServeHTTP(w, r)
		case RelationshipDestroyTagRelationProcedure:
			relationshipDestroyTagRelationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRelationshipHandler returns CodeUnimplemented from all methods.
type UnimplementedRelationshipHandler struct{}

func (UnimplementedRelationshipHandler) ListRelation(context.Context, *connect.Request[v1.ListRelationRequest]) (*connect.Response[v1.ListRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Relationship.ListRelation is not implemented"))
}

func (UnimplementedRelationshipHandler) SetRelation(context.Context, *connect.Request[v1.SetRelationRequest]) (*connect.Response[v1.SetRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Relationship.SetRelation is not implemented"))
}

func (UnimplementedRelationshipHandler) DeleteRelation(context.Context, *connect.Request[v1.DeleteRelationRequest]) (*connect.Response[v1.DeleteRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Relationship.DeleteRelation is not implemented"))
}

func (UnimplementedRelationshipHandler) DestroyExternalRelation(context.Context, *connect.Request[v1.DestroyExternalRelationRequest]) (*connect.Response[v1.DestroyExternalRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Relationship.DestroyExternalRelation is not implemented"))
}

func (UnimplementedRelationshipHandler) DestroyTagRelation(context.Context, *connect.Request[v1.DestroyTagRelationRequest]) (*connect.Response[v1.DestroyTagRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Relationship.DestroyTagRelation is not implemented"))
}
