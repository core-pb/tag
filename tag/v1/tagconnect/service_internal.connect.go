// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tag/v1/service_internal.proto

package tagconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/core-pb/tag/tag/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InternalName is the fully-qualified name of the Internal service.
	InternalName = "tag.v1.Internal"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InternalGetTagIDTreeizeProcedure is the fully-qualified name of the Internal's GetTagIDTreeize
	// RPC.
	InternalGetTagIDTreeizeProcedure = "/tag.v1.Internal/GetTagIDTreeize"
	// InternalBindRelationProcedure is the fully-qualified name of the Internal's BindRelation RPC.
	InternalBindRelationProcedure = "/tag.v1.Internal/BindRelation"
	// InternalUnbindRelationProcedure is the fully-qualified name of the Internal's UnbindRelation RPC.
	InternalUnbindRelationProcedure = "/tag.v1.Internal/UnbindRelation"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	internalServiceDescriptor               = v1.File_tag_v1_service_internal_proto.Services().ByName("Internal")
	internalGetTagIDTreeizeMethodDescriptor = internalServiceDescriptor.Methods().ByName("GetTagIDTreeize")
	internalBindRelationMethodDescriptor    = internalServiceDescriptor.Methods().ByName("BindRelation")
	internalUnbindRelationMethodDescriptor  = internalServiceDescriptor.Methods().ByName("UnbindRelation")
)

// InternalClient is a client for the tag.v1.Internal service.
type InternalClient interface {
	GetTagIDTreeize(context.Context, *connect.Request[v1.GetTagIDTreeizeRequest]) (*connect.Response[v1.GetTagIDTreeizeResponse], error)
	BindRelation(context.Context, *connect.Request[v1.BindRelationRequest]) (*connect.Response[v1.BindRelationResponse], error)
	UnbindRelation(context.Context, *connect.Request[v1.UnbindRelationRequest]) (*connect.Response[v1.UnbindRelationResponse], error)
}

// NewInternalClient constructs a client for the tag.v1.Internal service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInternalClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InternalClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &internalClient{
		getTagIDTreeize: connect.NewClient[v1.GetTagIDTreeizeRequest, v1.GetTagIDTreeizeResponse](
			httpClient,
			baseURL+InternalGetTagIDTreeizeProcedure,
			connect.WithSchema(internalGetTagIDTreeizeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bindRelation: connect.NewClient[v1.BindRelationRequest, v1.BindRelationResponse](
			httpClient,
			baseURL+InternalBindRelationProcedure,
			connect.WithSchema(internalBindRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unbindRelation: connect.NewClient[v1.UnbindRelationRequest, v1.UnbindRelationResponse](
			httpClient,
			baseURL+InternalUnbindRelationProcedure,
			connect.WithSchema(internalUnbindRelationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// internalClient implements InternalClient.
type internalClient struct {
	getTagIDTreeize *connect.Client[v1.GetTagIDTreeizeRequest, v1.GetTagIDTreeizeResponse]
	bindRelation    *connect.Client[v1.BindRelationRequest, v1.BindRelationResponse]
	unbindRelation  *connect.Client[v1.UnbindRelationRequest, v1.UnbindRelationResponse]
}

// GetTagIDTreeize calls tag.v1.Internal.GetTagIDTreeize.
func (c *internalClient) GetTagIDTreeize(ctx context.Context, req *connect.Request[v1.GetTagIDTreeizeRequest]) (*connect.Response[v1.GetTagIDTreeizeResponse], error) {
	return c.getTagIDTreeize.CallUnary(ctx, req)
}

// BindRelation calls tag.v1.Internal.BindRelation.
func (c *internalClient) BindRelation(ctx context.Context, req *connect.Request[v1.BindRelationRequest]) (*connect.Response[v1.BindRelationResponse], error) {
	return c.bindRelation.CallUnary(ctx, req)
}

// UnbindRelation calls tag.v1.Internal.UnbindRelation.
func (c *internalClient) UnbindRelation(ctx context.Context, req *connect.Request[v1.UnbindRelationRequest]) (*connect.Response[v1.UnbindRelationResponse], error) {
	return c.unbindRelation.CallUnary(ctx, req)
}

// InternalHandler is an implementation of the tag.v1.Internal service.
type InternalHandler interface {
	GetTagIDTreeize(context.Context, *connect.Request[v1.GetTagIDTreeizeRequest]) (*connect.Response[v1.GetTagIDTreeizeResponse], error)
	BindRelation(context.Context, *connect.Request[v1.BindRelationRequest]) (*connect.Response[v1.BindRelationResponse], error)
	UnbindRelation(context.Context, *connect.Request[v1.UnbindRelationRequest]) (*connect.Response[v1.UnbindRelationResponse], error)
}

// NewInternalHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInternalHandler(svc InternalHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	internalGetTagIDTreeizeHandler := connect.NewUnaryHandler(
		InternalGetTagIDTreeizeProcedure,
		svc.GetTagIDTreeize,
		connect.WithSchema(internalGetTagIDTreeizeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	internalBindRelationHandler := connect.NewUnaryHandler(
		InternalBindRelationProcedure,
		svc.BindRelation,
		connect.WithSchema(internalBindRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	internalUnbindRelationHandler := connect.NewUnaryHandler(
		InternalUnbindRelationProcedure,
		svc.UnbindRelation,
		connect.WithSchema(internalUnbindRelationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tag.v1.Internal/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InternalGetTagIDTreeizeProcedure:
			internalGetTagIDTreeizeHandler.ServeHTTP(w, r)
		case InternalBindRelationProcedure:
			internalBindRelationHandler.ServeHTTP(w, r)
		case InternalUnbindRelationProcedure:
			internalUnbindRelationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInternalHandler returns CodeUnimplemented from all methods.
type UnimplementedInternalHandler struct{}

func (UnimplementedInternalHandler) GetTagIDTreeize(context.Context, *connect.Request[v1.GetTagIDTreeizeRequest]) (*connect.Response[v1.GetTagIDTreeizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Internal.GetTagIDTreeize is not implemented"))
}

func (UnimplementedInternalHandler) BindRelation(context.Context, *connect.Request[v1.BindRelationRequest]) (*connect.Response[v1.BindRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Internal.BindRelation is not implemented"))
}

func (UnimplementedInternalHandler) UnbindRelation(context.Context, *connect.Request[v1.UnbindRelationRequest]) (*connect.Response[v1.UnbindRelationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Internal.UnbindRelation is not implemented"))
}
