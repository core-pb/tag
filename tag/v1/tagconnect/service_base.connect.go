// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tag/v1/service_base.proto

package tagconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/core-pb/tag/tag/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BaseName is the fully-qualified name of the Base service.
	BaseName = "tag.v1.Base"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BaseListModuleProcedure is the fully-qualified name of the Base's ListModule RPC.
	BaseListModuleProcedure = "/tag.v1.Base/ListModule"
	// BaseSetModuleProcedure is the fully-qualified name of the Base's SetModule RPC.
	BaseSetModuleProcedure = "/tag.v1.Base/SetModule"
	// BaseSetModuleInfoProcedure is the fully-qualified name of the Base's SetModuleInfo RPC.
	BaseSetModuleInfoProcedure = "/tag.v1.Base/SetModuleInfo"
	// BaseDeleteModuleProcedure is the fully-qualified name of the Base's DeleteModule RPC.
	BaseDeleteModuleProcedure = "/tag.v1.Base/DeleteModule"
	// BaseUpdateModuleVisibleTypeProcedure is the fully-qualified name of the Base's
	// UpdateModuleVisibleType RPC.
	BaseUpdateModuleVisibleTypeProcedure = "/tag.v1.Base/UpdateModuleVisibleType"
	// BaseListTypeProcedure is the fully-qualified name of the Base's ListType RPC.
	BaseListTypeProcedure = "/tag.v1.Base/ListType"
	// BaseSetTypeProcedure is the fully-qualified name of the Base's SetType RPC.
	BaseSetTypeProcedure = "/tag.v1.Base/SetType"
	// BaseSetTypeInfoProcedure is the fully-qualified name of the Base's SetTypeInfo RPC.
	BaseSetTypeInfoProcedure = "/tag.v1.Base/SetTypeInfo"
	// BaseDeleteTypeProcedure is the fully-qualified name of the Base's DeleteType RPC.
	BaseDeleteTypeProcedure = "/tag.v1.Base/DeleteType"
	// BaseUpdateTypeInheritProcedure is the fully-qualified name of the Base's UpdateTypeInherit RPC.
	BaseUpdateTypeInheritProcedure = "/tag.v1.Base/UpdateTypeInherit"
	// BaseUpdateTypeExclusiveProcedure is the fully-qualified name of the Base's UpdateTypeExclusive
	// RPC.
	BaseUpdateTypeExclusiveProcedure = "/tag.v1.Base/UpdateTypeExclusive"
	// BaseListTagProcedure is the fully-qualified name of the Base's ListTag RPC.
	BaseListTagProcedure = "/tag.v1.Base/ListTag"
	// BaseAddTagProcedure is the fully-qualified name of the Base's AddTag RPC.
	BaseAddTagProcedure = "/tag.v1.Base/AddTag"
	// BaseSetTagProcedure is the fully-qualified name of the Base's SetTag RPC.
	BaseSetTagProcedure = "/tag.v1.Base/SetTag"
	// BaseSetTagInfoProcedure is the fully-qualified name of the Base's SetTagInfo RPC.
	BaseSetTagInfoProcedure = "/tag.v1.Base/SetTagInfo"
	// BaseDeleteTagProcedure is the fully-qualified name of the Base's DeleteTag RPC.
	BaseDeleteTagProcedure = "/tag.v1.Base/DeleteTag"
	// BaseUpdateTagTypeProcedure is the fully-qualified name of the Base's UpdateTagType RPC.
	BaseUpdateTagTypeProcedure = "/tag.v1.Base/UpdateTagType"
	// BaseUpdateTagParentProcedure is the fully-qualified name of the Base's UpdateTagParent RPC.
	BaseUpdateTagParentProcedure = "/tag.v1.Base/UpdateTagParent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	baseServiceDescriptor                       = v1.File_tag_v1_service_base_proto.Services().ByName("Base")
	baseListModuleMethodDescriptor              = baseServiceDescriptor.Methods().ByName("ListModule")
	baseSetModuleMethodDescriptor               = baseServiceDescriptor.Methods().ByName("SetModule")
	baseSetModuleInfoMethodDescriptor           = baseServiceDescriptor.Methods().ByName("SetModuleInfo")
	baseDeleteModuleMethodDescriptor            = baseServiceDescriptor.Methods().ByName("DeleteModule")
	baseUpdateModuleVisibleTypeMethodDescriptor = baseServiceDescriptor.Methods().ByName("UpdateModuleVisibleType")
	baseListTypeMethodDescriptor                = baseServiceDescriptor.Methods().ByName("ListType")
	baseSetTypeMethodDescriptor                 = baseServiceDescriptor.Methods().ByName("SetType")
	baseSetTypeInfoMethodDescriptor             = baseServiceDescriptor.Methods().ByName("SetTypeInfo")
	baseDeleteTypeMethodDescriptor              = baseServiceDescriptor.Methods().ByName("DeleteType")
	baseUpdateTypeInheritMethodDescriptor       = baseServiceDescriptor.Methods().ByName("UpdateTypeInherit")
	baseUpdateTypeExclusiveMethodDescriptor     = baseServiceDescriptor.Methods().ByName("UpdateTypeExclusive")
	baseListTagMethodDescriptor                 = baseServiceDescriptor.Methods().ByName("ListTag")
	baseAddTagMethodDescriptor                  = baseServiceDescriptor.Methods().ByName("AddTag")
	baseSetTagMethodDescriptor                  = baseServiceDescriptor.Methods().ByName("SetTag")
	baseSetTagInfoMethodDescriptor              = baseServiceDescriptor.Methods().ByName("SetTagInfo")
	baseDeleteTagMethodDescriptor               = baseServiceDescriptor.Methods().ByName("DeleteTag")
	baseUpdateTagTypeMethodDescriptor           = baseServiceDescriptor.Methods().ByName("UpdateTagType")
	baseUpdateTagParentMethodDescriptor         = baseServiceDescriptor.Methods().ByName("UpdateTagParent")
)

// BaseClient is a client for the tag.v1.Base service.
type BaseClient interface {
	ListModule(context.Context, *connect.Request[v1.ListModuleRequest]) (*connect.Response[v1.ListModuleResponse], error)
	SetModule(context.Context, *connect.Request[v1.SetModuleRequest]) (*connect.Response[v1.SetModuleResponse], error)
	SetModuleInfo(context.Context, *connect.Request[v1.SetModuleInfoRequest]) (*connect.Response[v1.SetModuleInfoResponse], error)
	DeleteModule(context.Context, *connect.Request[v1.DeleteModuleRequest]) (*connect.Response[v1.DeleteModuleResponse], error)
	UpdateModuleVisibleType(context.Context, *connect.Request[v1.UpdateModuleVisibleTypeRequest]) (*connect.Response[v1.UpdateModuleVisibleTypeResponse], error)
	ListType(context.Context, *connect.Request[v1.ListTypeRequest]) (*connect.Response[v1.ListTypeResponse], error)
	SetType(context.Context, *connect.Request[v1.SetTypeRequest]) (*connect.Response[v1.SetTypeResponse], error)
	SetTypeInfo(context.Context, *connect.Request[v1.SetTypeInfoRequest]) (*connect.Response[v1.SetTypeInfoResponse], error)
	DeleteType(context.Context, *connect.Request[v1.DeleteTypeRequest]) (*connect.Response[v1.DeleteTypeResponse], error)
	UpdateTypeInherit(context.Context, *connect.Request[v1.UpdateTypeInheritRequest]) (*connect.Response[v1.UpdateTypeInheritResponse], error)
	UpdateTypeExclusive(context.Context, *connect.Request[v1.UpdateTypeExclusiveRequest]) (*connect.Response[v1.UpdateTypeExclusiveResponse], error)
	ListTag(context.Context, *connect.Request[v1.ListTagRequest]) (*connect.Response[v1.ListTagResponse], error)
	AddTag(context.Context, *connect.Request[v1.AddTagRequest]) (*connect.Response[v1.AddTagResponse], error)
	SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error)
	SetTagInfo(context.Context, *connect.Request[v1.SetTagInfoRequest]) (*connect.Response[v1.SetTagInfoResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
	UpdateTagType(context.Context, *connect.Request[v1.UpdateTagTypeRequest]) (*connect.Response[v1.UpdateTagTypeResponse], error)
	UpdateTagParent(context.Context, *connect.Request[v1.UpdateTagParentRequest]) (*connect.Response[v1.UpdateTagParentResponse], error)
}

// NewBaseClient constructs a client for the tag.v1.Base service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBaseClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BaseClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &baseClient{
		listModule: connect.NewClient[v1.ListModuleRequest, v1.ListModuleResponse](
			httpClient,
			baseURL+BaseListModuleProcedure,
			connect.WithSchema(baseListModuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setModule: connect.NewClient[v1.SetModuleRequest, v1.SetModuleResponse](
			httpClient,
			baseURL+BaseSetModuleProcedure,
			connect.WithSchema(baseSetModuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setModuleInfo: connect.NewClient[v1.SetModuleInfoRequest, v1.SetModuleInfoResponse](
			httpClient,
			baseURL+BaseSetModuleInfoProcedure,
			connect.WithSchema(baseSetModuleInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteModule: connect.NewClient[v1.DeleteModuleRequest, v1.DeleteModuleResponse](
			httpClient,
			baseURL+BaseDeleteModuleProcedure,
			connect.WithSchema(baseDeleteModuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateModuleVisibleType: connect.NewClient[v1.UpdateModuleVisibleTypeRequest, v1.UpdateModuleVisibleTypeResponse](
			httpClient,
			baseURL+BaseUpdateModuleVisibleTypeProcedure,
			connect.WithSchema(baseUpdateModuleVisibleTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listType: connect.NewClient[v1.ListTypeRequest, v1.ListTypeResponse](
			httpClient,
			baseURL+BaseListTypeProcedure,
			connect.WithSchema(baseListTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setType: connect.NewClient[v1.SetTypeRequest, v1.SetTypeResponse](
			httpClient,
			baseURL+BaseSetTypeProcedure,
			connect.WithSchema(baseSetTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTypeInfo: connect.NewClient[v1.SetTypeInfoRequest, v1.SetTypeInfoResponse](
			httpClient,
			baseURL+BaseSetTypeInfoProcedure,
			connect.WithSchema(baseSetTypeInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteType: connect.NewClient[v1.DeleteTypeRequest, v1.DeleteTypeResponse](
			httpClient,
			baseURL+BaseDeleteTypeProcedure,
			connect.WithSchema(baseDeleteTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTypeInherit: connect.NewClient[v1.UpdateTypeInheritRequest, v1.UpdateTypeInheritResponse](
			httpClient,
			baseURL+BaseUpdateTypeInheritProcedure,
			connect.WithSchema(baseUpdateTypeInheritMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTypeExclusive: connect.NewClient[v1.UpdateTypeExclusiveRequest, v1.UpdateTypeExclusiveResponse](
			httpClient,
			baseURL+BaseUpdateTypeExclusiveProcedure,
			connect.WithSchema(baseUpdateTypeExclusiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTag: connect.NewClient[v1.ListTagRequest, v1.ListTagResponse](
			httpClient,
			baseURL+BaseListTagProcedure,
			connect.WithSchema(baseListTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addTag: connect.NewClient[v1.AddTagRequest, v1.AddTagResponse](
			httpClient,
			baseURL+BaseAddTagProcedure,
			connect.WithSchema(baseAddTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTag: connect.NewClient[v1.SetTagRequest, v1.SetTagResponse](
			httpClient,
			baseURL+BaseSetTagProcedure,
			connect.WithSchema(baseSetTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTagInfo: connect.NewClient[v1.SetTagInfoRequest, v1.SetTagInfoResponse](
			httpClient,
			baseURL+BaseSetTagInfoProcedure,
			connect.WithSchema(baseSetTagInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+BaseDeleteTagProcedure,
			connect.WithSchema(baseDeleteTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTagType: connect.NewClient[v1.UpdateTagTypeRequest, v1.UpdateTagTypeResponse](
			httpClient,
			baseURL+BaseUpdateTagTypeProcedure,
			connect.WithSchema(baseUpdateTagTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTagParent: connect.NewClient[v1.UpdateTagParentRequest, v1.UpdateTagParentResponse](
			httpClient,
			baseURL+BaseUpdateTagParentProcedure,
			connect.WithSchema(baseUpdateTagParentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// baseClient implements BaseClient.
type baseClient struct {
	listModule              *connect.Client[v1.ListModuleRequest, v1.ListModuleResponse]
	setModule               *connect.Client[v1.SetModuleRequest, v1.SetModuleResponse]
	setModuleInfo           *connect.Client[v1.SetModuleInfoRequest, v1.SetModuleInfoResponse]
	deleteModule            *connect.Client[v1.DeleteModuleRequest, v1.DeleteModuleResponse]
	updateModuleVisibleType *connect.Client[v1.UpdateModuleVisibleTypeRequest, v1.UpdateModuleVisibleTypeResponse]
	listType                *connect.Client[v1.ListTypeRequest, v1.ListTypeResponse]
	setType                 *connect.Client[v1.SetTypeRequest, v1.SetTypeResponse]
	setTypeInfo             *connect.Client[v1.SetTypeInfoRequest, v1.SetTypeInfoResponse]
	deleteType              *connect.Client[v1.DeleteTypeRequest, v1.DeleteTypeResponse]
	updateTypeInherit       *connect.Client[v1.UpdateTypeInheritRequest, v1.UpdateTypeInheritResponse]
	updateTypeExclusive     *connect.Client[v1.UpdateTypeExclusiveRequest, v1.UpdateTypeExclusiveResponse]
	listTag                 *connect.Client[v1.ListTagRequest, v1.ListTagResponse]
	addTag                  *connect.Client[v1.AddTagRequest, v1.AddTagResponse]
	setTag                  *connect.Client[v1.SetTagRequest, v1.SetTagResponse]
	setTagInfo              *connect.Client[v1.SetTagInfoRequest, v1.SetTagInfoResponse]
	deleteTag               *connect.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
	updateTagType           *connect.Client[v1.UpdateTagTypeRequest, v1.UpdateTagTypeResponse]
	updateTagParent         *connect.Client[v1.UpdateTagParentRequest, v1.UpdateTagParentResponse]
}

// ListModule calls tag.v1.Base.ListModule.
func (c *baseClient) ListModule(ctx context.Context, req *connect.Request[v1.ListModuleRequest]) (*connect.Response[v1.ListModuleResponse], error) {
	return c.listModule.CallUnary(ctx, req)
}

// SetModule calls tag.v1.Base.SetModule.
func (c *baseClient) SetModule(ctx context.Context, req *connect.Request[v1.SetModuleRequest]) (*connect.Response[v1.SetModuleResponse], error) {
	return c.setModule.CallUnary(ctx, req)
}

// SetModuleInfo calls tag.v1.Base.SetModuleInfo.
func (c *baseClient) SetModuleInfo(ctx context.Context, req *connect.Request[v1.SetModuleInfoRequest]) (*connect.Response[v1.SetModuleInfoResponse], error) {
	return c.setModuleInfo.CallUnary(ctx, req)
}

// DeleteModule calls tag.v1.Base.DeleteModule.
func (c *baseClient) DeleteModule(ctx context.Context, req *connect.Request[v1.DeleteModuleRequest]) (*connect.Response[v1.DeleteModuleResponse], error) {
	return c.deleteModule.CallUnary(ctx, req)
}

// UpdateModuleVisibleType calls tag.v1.Base.UpdateModuleVisibleType.
func (c *baseClient) UpdateModuleVisibleType(ctx context.Context, req *connect.Request[v1.UpdateModuleVisibleTypeRequest]) (*connect.Response[v1.UpdateModuleVisibleTypeResponse], error) {
	return c.updateModuleVisibleType.CallUnary(ctx, req)
}

// ListType calls tag.v1.Base.ListType.
func (c *baseClient) ListType(ctx context.Context, req *connect.Request[v1.ListTypeRequest]) (*connect.Response[v1.ListTypeResponse], error) {
	return c.listType.CallUnary(ctx, req)
}

// SetType calls tag.v1.Base.SetType.
func (c *baseClient) SetType(ctx context.Context, req *connect.Request[v1.SetTypeRequest]) (*connect.Response[v1.SetTypeResponse], error) {
	return c.setType.CallUnary(ctx, req)
}

// SetTypeInfo calls tag.v1.Base.SetTypeInfo.
func (c *baseClient) SetTypeInfo(ctx context.Context, req *connect.Request[v1.SetTypeInfoRequest]) (*connect.Response[v1.SetTypeInfoResponse], error) {
	return c.setTypeInfo.CallUnary(ctx, req)
}

// DeleteType calls tag.v1.Base.DeleteType.
func (c *baseClient) DeleteType(ctx context.Context, req *connect.Request[v1.DeleteTypeRequest]) (*connect.Response[v1.DeleteTypeResponse], error) {
	return c.deleteType.CallUnary(ctx, req)
}

// UpdateTypeInherit calls tag.v1.Base.UpdateTypeInherit.
func (c *baseClient) UpdateTypeInherit(ctx context.Context, req *connect.Request[v1.UpdateTypeInheritRequest]) (*connect.Response[v1.UpdateTypeInheritResponse], error) {
	return c.updateTypeInherit.CallUnary(ctx, req)
}

// UpdateTypeExclusive calls tag.v1.Base.UpdateTypeExclusive.
func (c *baseClient) UpdateTypeExclusive(ctx context.Context, req *connect.Request[v1.UpdateTypeExclusiveRequest]) (*connect.Response[v1.UpdateTypeExclusiveResponse], error) {
	return c.updateTypeExclusive.CallUnary(ctx, req)
}

// ListTag calls tag.v1.Base.ListTag.
func (c *baseClient) ListTag(ctx context.Context, req *connect.Request[v1.ListTagRequest]) (*connect.Response[v1.ListTagResponse], error) {
	return c.listTag.CallUnary(ctx, req)
}

// AddTag calls tag.v1.Base.AddTag.
func (c *baseClient) AddTag(ctx context.Context, req *connect.Request[v1.AddTagRequest]) (*connect.Response[v1.AddTagResponse], error) {
	return c.addTag.CallUnary(ctx, req)
}

// SetTag calls tag.v1.Base.SetTag.
func (c *baseClient) SetTag(ctx context.Context, req *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error) {
	return c.setTag.CallUnary(ctx, req)
}

// SetTagInfo calls tag.v1.Base.SetTagInfo.
func (c *baseClient) SetTagInfo(ctx context.Context, req *connect.Request[v1.SetTagInfoRequest]) (*connect.Response[v1.SetTagInfoResponse], error) {
	return c.setTagInfo.CallUnary(ctx, req)
}

// DeleteTag calls tag.v1.Base.DeleteTag.
func (c *baseClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// UpdateTagType calls tag.v1.Base.UpdateTagType.
func (c *baseClient) UpdateTagType(ctx context.Context, req *connect.Request[v1.UpdateTagTypeRequest]) (*connect.Response[v1.UpdateTagTypeResponse], error) {
	return c.updateTagType.CallUnary(ctx, req)
}

// UpdateTagParent calls tag.v1.Base.UpdateTagParent.
func (c *baseClient) UpdateTagParent(ctx context.Context, req *connect.Request[v1.UpdateTagParentRequest]) (*connect.Response[v1.UpdateTagParentResponse], error) {
	return c.updateTagParent.CallUnary(ctx, req)
}

// BaseHandler is an implementation of the tag.v1.Base service.
type BaseHandler interface {
	ListModule(context.Context, *connect.Request[v1.ListModuleRequest]) (*connect.Response[v1.ListModuleResponse], error)
	SetModule(context.Context, *connect.Request[v1.SetModuleRequest]) (*connect.Response[v1.SetModuleResponse], error)
	SetModuleInfo(context.Context, *connect.Request[v1.SetModuleInfoRequest]) (*connect.Response[v1.SetModuleInfoResponse], error)
	DeleteModule(context.Context, *connect.Request[v1.DeleteModuleRequest]) (*connect.Response[v1.DeleteModuleResponse], error)
	UpdateModuleVisibleType(context.Context, *connect.Request[v1.UpdateModuleVisibleTypeRequest]) (*connect.Response[v1.UpdateModuleVisibleTypeResponse], error)
	ListType(context.Context, *connect.Request[v1.ListTypeRequest]) (*connect.Response[v1.ListTypeResponse], error)
	SetType(context.Context, *connect.Request[v1.SetTypeRequest]) (*connect.Response[v1.SetTypeResponse], error)
	SetTypeInfo(context.Context, *connect.Request[v1.SetTypeInfoRequest]) (*connect.Response[v1.SetTypeInfoResponse], error)
	DeleteType(context.Context, *connect.Request[v1.DeleteTypeRequest]) (*connect.Response[v1.DeleteTypeResponse], error)
	UpdateTypeInherit(context.Context, *connect.Request[v1.UpdateTypeInheritRequest]) (*connect.Response[v1.UpdateTypeInheritResponse], error)
	UpdateTypeExclusive(context.Context, *connect.Request[v1.UpdateTypeExclusiveRequest]) (*connect.Response[v1.UpdateTypeExclusiveResponse], error)
	ListTag(context.Context, *connect.Request[v1.ListTagRequest]) (*connect.Response[v1.ListTagResponse], error)
	AddTag(context.Context, *connect.Request[v1.AddTagRequest]) (*connect.Response[v1.AddTagResponse], error)
	SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error)
	SetTagInfo(context.Context, *connect.Request[v1.SetTagInfoRequest]) (*connect.Response[v1.SetTagInfoResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
	UpdateTagType(context.Context, *connect.Request[v1.UpdateTagTypeRequest]) (*connect.Response[v1.UpdateTagTypeResponse], error)
	UpdateTagParent(context.Context, *connect.Request[v1.UpdateTagParentRequest]) (*connect.Response[v1.UpdateTagParentResponse], error)
}

// NewBaseHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBaseHandler(svc BaseHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	baseListModuleHandler := connect.NewUnaryHandler(
		BaseListModuleProcedure,
		svc.ListModule,
		connect.WithSchema(baseListModuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetModuleHandler := connect.NewUnaryHandler(
		BaseSetModuleProcedure,
		svc.SetModule,
		connect.WithSchema(baseSetModuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetModuleInfoHandler := connect.NewUnaryHandler(
		BaseSetModuleInfoProcedure,
		svc.SetModuleInfo,
		connect.WithSchema(baseSetModuleInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseDeleteModuleHandler := connect.NewUnaryHandler(
		BaseDeleteModuleProcedure,
		svc.DeleteModule,
		connect.WithSchema(baseDeleteModuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseUpdateModuleVisibleTypeHandler := connect.NewUnaryHandler(
		BaseUpdateModuleVisibleTypeProcedure,
		svc.UpdateModuleVisibleType,
		connect.WithSchema(baseUpdateModuleVisibleTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseListTypeHandler := connect.NewUnaryHandler(
		BaseListTypeProcedure,
		svc.ListType,
		connect.WithSchema(baseListTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetTypeHandler := connect.NewUnaryHandler(
		BaseSetTypeProcedure,
		svc.SetType,
		connect.WithSchema(baseSetTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetTypeInfoHandler := connect.NewUnaryHandler(
		BaseSetTypeInfoProcedure,
		svc.SetTypeInfo,
		connect.WithSchema(baseSetTypeInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseDeleteTypeHandler := connect.NewUnaryHandler(
		BaseDeleteTypeProcedure,
		svc.DeleteType,
		connect.WithSchema(baseDeleteTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseUpdateTypeInheritHandler := connect.NewUnaryHandler(
		BaseUpdateTypeInheritProcedure,
		svc.UpdateTypeInherit,
		connect.WithSchema(baseUpdateTypeInheritMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseUpdateTypeExclusiveHandler := connect.NewUnaryHandler(
		BaseUpdateTypeExclusiveProcedure,
		svc.UpdateTypeExclusive,
		connect.WithSchema(baseUpdateTypeExclusiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseListTagHandler := connect.NewUnaryHandler(
		BaseListTagProcedure,
		svc.ListTag,
		connect.WithSchema(baseListTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseAddTagHandler := connect.NewUnaryHandler(
		BaseAddTagProcedure,
		svc.AddTag,
		connect.WithSchema(baseAddTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetTagHandler := connect.NewUnaryHandler(
		BaseSetTagProcedure,
		svc.SetTag,
		connect.WithSchema(baseSetTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetTagInfoHandler := connect.NewUnaryHandler(
		BaseSetTagInfoProcedure,
		svc.SetTagInfo,
		connect.WithSchema(baseSetTagInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseDeleteTagHandler := connect.NewUnaryHandler(
		BaseDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(baseDeleteTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseUpdateTagTypeHandler := connect.NewUnaryHandler(
		BaseUpdateTagTypeProcedure,
		svc.UpdateTagType,
		connect.WithSchema(baseUpdateTagTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseUpdateTagParentHandler := connect.NewUnaryHandler(
		BaseUpdateTagParentProcedure,
		svc.UpdateTagParent,
		connect.WithSchema(baseUpdateTagParentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tag.v1.Base/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BaseListModuleProcedure:
			baseListModuleHandler.ServeHTTP(w, r)
		case BaseSetModuleProcedure:
			baseSetModuleHandler.ServeHTTP(w, r)
		case BaseSetModuleInfoProcedure:
			baseSetModuleInfoHandler.ServeHTTP(w, r)
		case BaseDeleteModuleProcedure:
			baseDeleteModuleHandler.ServeHTTP(w, r)
		case BaseUpdateModuleVisibleTypeProcedure:
			baseUpdateModuleVisibleTypeHandler.ServeHTTP(w, r)
		case BaseListTypeProcedure:
			baseListTypeHandler.ServeHTTP(w, r)
		case BaseSetTypeProcedure:
			baseSetTypeHandler.ServeHTTP(w, r)
		case BaseSetTypeInfoProcedure:
			baseSetTypeInfoHandler.ServeHTTP(w, r)
		case BaseDeleteTypeProcedure:
			baseDeleteTypeHandler.ServeHTTP(w, r)
		case BaseUpdateTypeInheritProcedure:
			baseUpdateTypeInheritHandler.ServeHTTP(w, r)
		case BaseUpdateTypeExclusiveProcedure:
			baseUpdateTypeExclusiveHandler.ServeHTTP(w, r)
		case BaseListTagProcedure:
			baseListTagHandler.ServeHTTP(w, r)
		case BaseAddTagProcedure:
			baseAddTagHandler.ServeHTTP(w, r)
		case BaseSetTagProcedure:
			baseSetTagHandler.ServeHTTP(w, r)
		case BaseSetTagInfoProcedure:
			baseSetTagInfoHandler.ServeHTTP(w, r)
		case BaseDeleteTagProcedure:
			baseDeleteTagHandler.ServeHTTP(w, r)
		case BaseUpdateTagTypeProcedure:
			baseUpdateTagTypeHandler.ServeHTTP(w, r)
		case BaseUpdateTagParentProcedure:
			baseUpdateTagParentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBaseHandler returns CodeUnimplemented from all methods.
type UnimplementedBaseHandler struct{}

func (UnimplementedBaseHandler) ListModule(context.Context, *connect.Request[v1.ListModuleRequest]) (*connect.Response[v1.ListModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.ListModule is not implemented"))
}

func (UnimplementedBaseHandler) SetModule(context.Context, *connect.Request[v1.SetModuleRequest]) (*connect.Response[v1.SetModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.SetModule is not implemented"))
}

func (UnimplementedBaseHandler) SetModuleInfo(context.Context, *connect.Request[v1.SetModuleInfoRequest]) (*connect.Response[v1.SetModuleInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.SetModuleInfo is not implemented"))
}

func (UnimplementedBaseHandler) DeleteModule(context.Context, *connect.Request[v1.DeleteModuleRequest]) (*connect.Response[v1.DeleteModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.DeleteModule is not implemented"))
}

func (UnimplementedBaseHandler) UpdateModuleVisibleType(context.Context, *connect.Request[v1.UpdateModuleVisibleTypeRequest]) (*connect.Response[v1.UpdateModuleVisibleTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.UpdateModuleVisibleType is not implemented"))
}

func (UnimplementedBaseHandler) ListType(context.Context, *connect.Request[v1.ListTypeRequest]) (*connect.Response[v1.ListTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.ListType is not implemented"))
}

func (UnimplementedBaseHandler) SetType(context.Context, *connect.Request[v1.SetTypeRequest]) (*connect.Response[v1.SetTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.SetType is not implemented"))
}

func (UnimplementedBaseHandler) SetTypeInfo(context.Context, *connect.Request[v1.SetTypeInfoRequest]) (*connect.Response[v1.SetTypeInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.SetTypeInfo is not implemented"))
}

func (UnimplementedBaseHandler) DeleteType(context.Context, *connect.Request[v1.DeleteTypeRequest]) (*connect.Response[v1.DeleteTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.DeleteType is not implemented"))
}

func (UnimplementedBaseHandler) UpdateTypeInherit(context.Context, *connect.Request[v1.UpdateTypeInheritRequest]) (*connect.Response[v1.UpdateTypeInheritResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.UpdateTypeInherit is not implemented"))
}

func (UnimplementedBaseHandler) UpdateTypeExclusive(context.Context, *connect.Request[v1.UpdateTypeExclusiveRequest]) (*connect.Response[v1.UpdateTypeExclusiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.UpdateTypeExclusive is not implemented"))
}

func (UnimplementedBaseHandler) ListTag(context.Context, *connect.Request[v1.ListTagRequest]) (*connect.Response[v1.ListTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.ListTag is not implemented"))
}

func (UnimplementedBaseHandler) AddTag(context.Context, *connect.Request[v1.AddTagRequest]) (*connect.Response[v1.AddTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.AddTag is not implemented"))
}

func (UnimplementedBaseHandler) SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.SetTag is not implemented"))
}

func (UnimplementedBaseHandler) SetTagInfo(context.Context, *connect.Request[v1.SetTagInfoRequest]) (*connect.Response[v1.SetTagInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.SetTagInfo is not implemented"))
}

func (UnimplementedBaseHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.DeleteTag is not implemented"))
}

func (UnimplementedBaseHandler) UpdateTagType(context.Context, *connect.Request[v1.UpdateTagTypeRequest]) (*connect.Response[v1.UpdateTagTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.UpdateTagType is not implemented"))
}

func (UnimplementedBaseHandler) UpdateTagParent(context.Context, *connect.Request[v1.UpdateTagParentRequest]) (*connect.Response[v1.UpdateTagParentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.v1.Base.UpdateTagParent is not implemented"))
}
